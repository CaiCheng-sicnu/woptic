#!/bin/bash

### woptic/bin/woptic
###
###    Wrapper script for adaptive optics algorithm
###
### Copyright 2009-2012 Philipp Wissgott
###           2014-2016 Elias Assmann
###

# exit on error
set -e

# default parameters
start=1
init=
definit=3
theta=0.5
maxiterations=5
fullarch=yes

file=$(basename $PWD)
home=$(dirname $0)
name=$(basename $0)
log=:log
scratch=.scratch # “scratch” placeholder dir in archive

# copied from x_lapw
[[ -e $file.struct ]] && \
    c=$(cut -b -6 "$file.struct" |
    awk 'BEGIN{c="c"};
         {if ($0 == "-1 0 0") {
            getline;
            {if ($0 == " 0-1 0"){
               getline;
               {if ($0 == " 0 0-1")
                  {c= ""}
         }}}}};
         END{print c}')

usage () {
    cat <<EOF
WOPTIC:   adaptive algorithm to compute optical conductivity, dc conductivity,
          and thermopower

USAGE:    woptic [OPTIONS]

OPTIONS:
 --max-iterations N, -i N 
                number of total iterations (default: $maxiterations)
 --restart I    continue from iteration I
 --restore I    restore iteration I without continuing
 --theta Θ      change refinement “harshness”
                (0 [uniform] … 1 [most adaptive]; default: $theta)
 --inter        focus refinement on higher energies (usually inter-orbital)
 --init         initial refinement steps (default: $definit)
 --nosym        do not use symmetry operations
 --band         use ‘case.klist_band’
  -p            use parallel lapw1, optic
  -c            use complex  lapw1, optic
 --so           use lapwso to compute energies
 --up|--dn      use lapw1 -up/-dn to compute energies
 --case, -f     override  ‘case’
  -h, --help    print this message and exit
  -v, --version print version information and exit
  -V, --verbose increase verbiage level to maximum
  -q, --quiet
EOF
}

version () {
    r=$(echo '$version: v0.1.0-63-gd13290c$' |
               perl -pe 's/.*: *(\S+) *\$/$1/')
    echo "woptic $r"
}

croak () {
    echo >&2 "$0: $@"
    exit 1
}

carp () {
    [[ $q ]] && return
    echo >&2 "$0: $@"
}

archive () {
    local tozip

    echo Archiving iteration $1 in ‘$fn_hist’ …

    for f in $archfiles; do
        ln $v -fs $f $f.$1      # create symlinks for names
        tozip+=" $f.$1"
    done
    zip -qg $v $fn_hist $tozip  # -g: grow archive in-place
    rm $v $tozip                # remove symlinks again

    if [[ $fullarch ]]; then
        tozip=
        [[ $1 -ne 0 ]] && zip -qd $v $fn_hist $scratch/\*

        [[ -d $scratch ]] || mkdir $v $scratch
        for f in $scratchfiles; do
            ln $v -fs $SCRATCH$f $scratch/$f.$1
            tozip+=" $scratch/$f.$1"
        done
        zip -qg $v $fn_hist $tozip
        rm $v $tozip
        rmdir $v $scratch/ || [[ $q ]] || echo continuing anyway …
    fi
}

unarchive () {
    local tounzip qq

    [[ $v ]] || qq=-q

    [[ $q ]] || echo Restoring iteration $1 from ‘$fn_hist’ …

    unzip -l $fn_hist $scratch || croak ‘$fn_hist’ does not contain \
                                        SCRATCH files -- cannot restore

    for f in $archfiles; do
        tounzip+=" $f.$1"
    done

    [[ $tounzip ]] && unzip $qq $fn_hist $tounzip

    for f in $archfiles; do
        mv $v $f.$1 $f
    done

    tounzip=
    for f in $scratchfiles; do
        tounzip+=" $scratch/$f.$1"
    done

    [[ $tounzip ]] && unzip $qq $fn_hist $tounzip

    for f in $scratchfiles; do
        mv $v $scratch/$f.$1 $SCRATCH$f
    done

    rmdir $v $scratch/ || [[ $q ]] || echo continuing anyway …
}

w () {
    echo "`date`> (w) $@" >> $log
    [[ $v ]] && echo
    [[ $v ]] && echo $1 | perl -ple tr/a-z/A-Z/
    $@
}

wq () {
    local t

    echo "`date`> (w) $@" >> $log

    [[ $v ]] && echo
    [[ $v ]] && echo $1 | perl -ple tr/a-z/A-Z/
    $@
}


## Option handling ##
shopt -s extglob
while [[ $# -gt 0 ]]; do
    case $1 in
        -i|?(-)-max-iterations) maxiterations=$2; shift
        [[ $# -gt 0 ]] || croak --max-iterations requires an argument ;;
        ?(-)-restart)                 restart=$2; shift
        [[ $# -gt 0 ]] || croak --restart requires an argument        ;;
        ?(-)-restore)                 restore=$2; shift
        [[ $# -gt 0 ]] || croak --restore requires an argument        ;;
        ?(-)-th|?(-)-theta)             theta=$2; shift
        [[ $# -gt 0 ]] || croak --theta requires an argument          ;;
        ?(-)-init)                       init=$2; shift
        [[ $# -gt 0 ]] || croak --init requires an argument           ;;
        -f|?(-)-case)                    file=$2; shift
                                        ffile="-f $file"
        [[ $# -gt 0 ]] || croak --case requires an argument           ;;
        ?(-)-inter)            inter=-inter    ;;
        ?(-)-nosym)            nosym=yes       ;;
        ?(-)-band)              band=-band     ;; 
        -L|?(-)-leanarch)   fullarch=          ;;
        -p|?(-)-parallel?(-lapw1)) p=-p        ;;
        -c|?(-)-complex?(-lapw1))  c=-c        ;;
        ?(-)-so)                  so=-so       ;;
        ?(-)-up)                updn=up        ;;
        ?(-)-dn)                updn=dn        ;;
        -V|?(-)-verbose)           v="-v"      ;;
        -q|?(-)-quiet)             q="-q"      ;;

        -v|?(-)-version)
            version; exit 0;;
        -[hH]|-help|--help)
            usage;   exit 0;;

        *) croak "argument “$1” not recognized (try --help)";;
    esac

    shift
done
shopt -u extglob

## Output Banner (color on terminal)
if tty <&1 -s; then
    banner=ansi

else
    banner=txt
fi
banner=$(dirname $0)/../src/logo.$banner
cat $banner
echo

echo ">   ($(basename $0)) options: $@" >>:log

[[ $updn ]] && sp=-$updn

inwop=$file.inwop

[[ -s $inwop ]] || \
    croak "‘$inwop’ required."

# sets matelmode, runlapw1, runoptic, convert_vr, peierls, need_ham,
# file names
eval $(inwopcheck $inwop $file || echo exit $?)

klisttmp="mktemp $fn_klist.XXX"

reftetfiles="$fn_tet $fn_ftet $fn_klist $fn_fklist $fn_voe $fn_map"
wopmainfiles="$fn_contr $fn_doscontr $fn_K1"

[[ $runlapw1   ]] && oldnewfiles+=" $fn_energy"
[[ $runoptic   ]] && oldnewfiles+=" $fn_mommat"
[[ $need_ham   ]] && oldnewfiles+=" $fn_ham"
[[ $convert_vr ]] && oldnewfiles+=" $fn_vk"
[[ $mixed_vr   ]] && oldnewfiles+=" $fn_vvk"
archfiles="$fn_klist $fn_fklist $fn_klist$suf_new $fn_optcond $fn_wdos
           $fn_outref $fn_outwop"


## Special -restore mode ##
if [[ $restore ]]; then
    start=$restore
    restore=$(( $restore - 1 ))
    echo Restoring iteration $start …
    unarchive $restore
    exit
fi    


## Test file existence ##
[[ $need_ham   && ! -s $fn_hr  ]] && \
    croak "‘$fn_hr’ required.  Run Wannier90 with ‘hr_plot=T’."
[[ $convert_vr && ! -s $fn_vr  ]] && \
    croak "‘$fn_vr’ required.  Run ‘x optic’ and ‘compute_vr’."
[[ $mixed_vr   && ! -s $fn_vvr ]] && \
    croak "‘$fn_vvr’ required.  Run ‘x optic’ and ‘compute_vr’."

must="$fn_fermi"
[[ $runoptic ]] && must+=" $fn_inop"
for f in $must; do
    [[ -s $f ]] || croak "required file ‘$f’ not found"
done

# canonicalize $SCRATCH
[[ -z $SCRATCH ]] && $SCRATCH=.
export SCRATCH=$(readlink -f $SCRATCH)/


## Header ##
echo -n " MATELMODE: $matelmode"
echo
echo     " OPTIONS:"
echo     "          case  = $file"
echo -ne "    max. iter.  = $maxiterations\t\t"
echo -e  "      parallel? : $p"
echo -ne "       restart? : $restart\t\t"
echo -e  "       complex? : $c"
echo -ne "        -inter? : $inter\t\t"
echo -e  "          band? : $band"
echo -ne "         theta  = $theta\t\t"
echo -e  "            so? : $so"
echo -ne "    full arch.? : $fullarch\t\t"
echo -e  "            sp  : $sp"
echo -ne "          init  = $init\t\t"
echo -e  "       SCRATCH  = $SCRATCH"
echo

if [[ -z $init && ! $restart && ! -s $fn_hist ]]; then
    init=$definit
fi

if [[ $init ]]; then
   ## Initialize history
   ##
   ## Some files have to contain “dummy zeros”, some just have to
   ## exist.
                             echo "0 0 0"   > $fn_contr
                             true           > $fn_K1
                             true           > $fn_doscontr
    [[     $need_ham   ]] && echo "0 0 0"   > $fn_ham
    [[     $runoptic   ]] && echo "0"       > $fn_mommat
    [[     $runlapw1   ]] && true           > $fn_energy
    for f in $fn_vk; do
        [[ $convert_vr ]] && echo "0 0"     > $f
    done
    for f in $fn_vvk; do
        [[ $mixed_vr   ]] && echo "0 0 0"   > $f
    done

    archive 0
elif [[ $restart ]]; then
    start=$restart
    restart=$(( $restart - 1 ))
    echo Restart from iteration $start …
    unarchive $restart
else                            # resume
    last=$(unzip -qq -l $fn_hist '*.outputwop.*' | tail -1 | sed 's/.*\.//')
    start=$(( $last + 1 ))
fi

for iter in $(seq $start $maxiterations)
do
    echo
    echo "+++ iteration $iter +++"

    for f in $oldnewfiles; do
        mv $v $f $f$suf_old
    done

    if [[ $iter = 1 ]]; then
        if [[ $nosym ]]; then
            mv $v     $fn_struct $fn_struct$suf_sym
            ln -fs $v $fn_ksym   $fn_struct
        fi
        w refine_tetra -init $init $file
        if [[ $nosym ]]; then
            ln -sf $v $fn_struct$suf_sym $fn_struct
        fi
        nk=$(perl -ne '/^END/ and print($.-1), exit' $fn_kadd)
    else
        # refine k-mesh
        w refine_tetra -th $theta $inter $file
        nk=$(perl -ne '/^END/ and print($.-1), exit' $fn_kadd)

        fgrep --text "estimator =" $fn_outref
    fi

    # if there was no error, move updated files over old ones …
    for f in $reftetfiles; do
        cp $v $f$suf_rfd $f
    done

    # … then overwrite klist with klist_add
    [[ $iter != 1 ]] && mv $v $fn_kadd $fn_klist

    echo "  new k-points: "$nk
    if [[ $nk -ne 0 ]]; then  #special case where not much is to do here
        if [[ $runlapw1 ]]; then
            if [[ $so ]]; then
                if [[ $sp ]]; then
                    x lapw1  $ffile -up $p $c
                    x lapw1  $ffile -dn $p $c
                    x lapwso $ffile -up $p $c
                else
                    #FIXME: “this is not yet working” (???)
                    x lapw1  $ffile $p $c
                    x lapwso $ffile $p $c
                fi
            else
                x lapw1 $ffile $sp $p $c #work with klist
            fi
            
            [[ $p ]] && x joinvec -enefile $ffile $sp $so
        fi

        [[ $runoptic ]] && x optic $ffile $p $c $so $sp

        if [[ $peierls ]]; then
            ktmp=$(klisttmp)
            mv $v $fn_klist $ktmp
            ln -fs $v $fn_fklist $fn_klist
        fi
        x convham $ffile
        if [[ $peierls ]]; then
            rm $v $fn_klist
            mv $v $ktmp $fn_klist
        fi

        [[ $runoptic || $need_ham ]] && wq joinham $file
        [[ $runoptic ]]&& mv $v $fn_mommat$suf_jnd $fn_mommat
        [[ $need_ham ]]&& mv $v $fn_ham$suf_jnd    $fn_ham

        if [[ $convert_vr ]]; then
            wq convert_vr $file
            for f in $fn_vk; do
                wq joinham $f$suf_old $f $f$suf_jnd
                mv $v $f$suf_jnd $f
            done

            if [[ $mixed_vr ]]; then
                for f in $fn_vvk; do
                    wq joinham $f$suf_old $f $f$suf_jnd
                    mv $v $f$suf_jnd $f
                done
            fi
        fi

        if [[ $iter -ne 1 && $runlapw1 ]]; then
            natoms=$(fgrep --text "elements:" $fn_outwop | cut -d: -f2)

            tail -n +$(( 2*$natoms+1 )) $fn_energy >>$fn_energy$suf_old
            mv $v $fn_energy$suf_old $fn_energy
        fi
    elif [[ $peierls ]]; then # Nk = 0
        # for Peierls we have to Fourier transform the full
        # Hamiltonian even if there is no new symmetrized k-point
        ktmp=$(klisttmp)
        mv $v $fn_klist $ktmp
        ln -fs $v $fn_fklist $fn_klist

        x convham $ffile

        rm $fn_klist
        mv $v $ktmp $fn_klist
    else
        carp "refine_tetra found no new k-points
(maybe try re-running with smaller --theta or larger --init)"
        for f in $oldnewfiles; do
            mv $v $f$suf_old $f
        done
    fi

    # replace added k-points with full symmetrized list
    [[ ! $band && $iter != 1 ]] && cp $v $fn_klist$suf_rfd $fn_klist

    [[ $nosym ]] && ln -sf $v $fn_ksym $fn_struct

    # main run to compute optical conductivity on given mesh
    w woptic_main $file $band $so $sp

    # if there was no error, move updated files over old ones
    for f in $wopmainfiles; do
        mv $v $f$suf_new $f
    done

    [[ $nosym ]] && ln -sf $v $fn_struct$suf_sym $fn_struct

    fgrep --text $fn_outwop -e "sumrules" -e "dc cond" -e "thermopower"

    # store history
    archive $iter
done

if [[ ! $q ]]; then
    echo
    echo "+++ woptic done +++"
fi
